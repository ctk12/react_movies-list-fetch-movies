{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/helpers.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","normalizeMovieData","movieData","Poster","Title","Plot","imdbID","FindMovie","setSearchQuery","addMovie","useState","setMovie","responseError","setResponseError","hasLoadingError","setHasLoadingError","isLoaded","setIsLoaded","reset","findMovie","event","a","preventDefault","searchQuery","movieDataFromServer","newMovie","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","length","onClick","App","setMovies","changeSearchQuery","useCallback","newQuery","some","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c817964c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=648865c';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\n\nexport const isResponseOk = (response: MovieData | ResponseError) => {\n  if ('Error' in response) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const normalizeMovieData = (movieData: MovieData) => {\n  const {\n    Poster: imgUrl,\n    Title: title,\n    Plot: description,\n    imdbID: imdbId,\n  } = movieData;\n\n  const imdbUrl = `https://www.imdb.com/title/${imdbId}`;\n\n  const movie: Movie = {\n    imgUrl,\n    title,\n    description,\n    imdbId,\n    imdbUrl,\n  };\n\n  if (movie.imgUrl === 'N/A') {\n    movie.imgUrl = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n  }\n\n  return movie;\n};\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { isResponseOk, normalizeMovieData } from './helpers';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  query: string;\n  setSearchQuery: (value: string) => void;\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  query,\n  setSearchQuery,\n  addMovie,\n}) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [responseError, setResponseError] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(true);\n\n  const reset = () => {\n    setResponseError(false);\n    setHasLoadingError(false);\n  };\n\n  const changeQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    reset();\n\n    const { value } = event.target;\n\n    setSearchQuery(value);\n  };\n\n  const findMovie = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const searchQuery: string = query;\n\n    try {\n      setIsLoaded(false);\n\n      const movieDataFromServer = await getMovie(searchQuery);\n\n      if (isResponseOk(movieDataFromServer)) {\n        const newMovie = normalizeMovieData(movieDataFromServer as MovieData);\n\n        setMovie(newMovie);\n      } else {\n        setResponseError(true);\n      }\n    } catch {\n      setHasLoadingError(true);\n    } finally {\n      setIsLoaded(true);\n    }\n  };\n\n  const handleAddButtonClick = () => {\n    if (movie) {\n      addMovie(movie);\n    }\n\n    setMovie(null);\n    setSearchQuery('');\n    reset();\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={findMovie}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={changeQuery}\n            />\n          </div>\n\n          {responseError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\">\n              Can&apos;t load data from server\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                {\n                  'is-loading': !isLoaded,\n                },\n              )}\n              disabled={query.length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddButtonClick}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const addMovie = (newMovie: Movie) => {\n    const isMovieInList = movies\n      .some(movie => movie.imdbId === newMovie.imdbId);\n\n    if (!isMovieInList) {\n      setMovies(currentMovies => [...currentMovies, newMovie]);\n    }\n  };\n\n  const changeSearchQuery = useCallback((newQuery: string) => {\n    setSearchQuery(newQuery);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={searchQuery}\n          setSearchQuery={changeSearchQuery}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}